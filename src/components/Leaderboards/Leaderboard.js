import React, { useEffect, useState } from "react";
import TotalLeaderboard from "./TotalLeaderboard";
import DepartmentLeaderboard from "./DepartmentLeaderboard";
import departments from "../../data/Departments";
import { scoreApi } from "../../api.js";

const Leaderboard = ({ isOpen, onClose, initialDepartment, reOpen, setReOpen }) => {
  const [activeTab, setActiveTab] = useState("Total");
  const [data, setData] = useState([]);
  const [department, setDepartment] = useState(initialDepartment);
  const [placeholder, setPlaceholder] = useState("Ïû¨Ìïô Ï§ëÏù∏ ÌïôÍ≥ºÎ•º Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî");
  const [inputValue, setInputValue] = useState(initialDepartment);
  const [filteredDepartments, setFilteredDepartments] = useState([]);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [firstOpen, setFirstOpen] = useState(false); // ‚úÖ Î¶¨ÎçîÎ≥¥ÎìúÍ∞Ä Ï≤òÏùå Ïó¥Î†∏ÎäîÏßÄ Ï≤¥ÌÅ¨

  // ‚úÖ ÏµúÏ¥à 1ÌöåÎßå fetch Ïã§Ìñâ (isOpenÏù¥ Ï≤òÏùå trueÍ∞Ä Îê† Îïå)
  useEffect(() => {
    if (isOpen && !firstOpen) {
      console.log("üì¢ Î¶¨ÎçîÎ≥¥Îìú ÏµúÏ¥à Ïò§Ìîà - Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞");
      fetchData();
      setFirstOpen(true); // ‚úÖ Ìïú Î≤à Ïã§Ìñâ ÌõÑ Îã§Ïãú Ïã§ÌñâÎêòÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ï
    }
  }, [isOpen]);

  // ‚úÖ Nickname Îì±Î°ù ÌõÑ (reOpen) ÏÉàÎ°úÍ≥†Ïπ® Ìä∏Î¶¨Í±∞
  useEffect(() => {
    if (reOpen) {
      console.log("üîÑ Nickname Îì±Î°ù ÌõÑ Î¶¨ÎçîÎ≥¥Îìú ÏóÖÎç∞Ïù¥Ìä∏");
      fetchData();
      setReOpen(false); // ‚úÖ Îç∞Ïù¥ÌÑ∞ Í∞±Ïã† ÌõÑ Îã§Ïãú falseÎ°ú ÏÑ§Ï†ï
    }
  }, [reOpen]);

  const fetchData = async () => {
    try {
      const fetchedData = await scoreApi.getAllScores();
      const sortedData = [...fetchedData].sort((a, b) => b.similarity - a.similarity);
      setData(sortedData);
    } catch (error) {
      console.error("‚ùå Failed to fetch scores:", error);
    }
  };

  // ‚úÖ Update input value when department changes
  useEffect(() => {
    setInputValue(department);
  }, [department]);

  const handleInputChange = (e) => {
    const value = e.target.value;
    setInputValue(value);
    const filtered = departments.filter((dept) => dept.includes(value)).sort().slice(0, 7);
    setFilteredDepartments(filtered);
    setIsDropdownOpen(filtered.length > 0);
  };

  const handleSelectedDepartment = (dept) => {
    setDepartment(dept);
    setInputValue(dept);
    setIsDropdownOpen(false);
  };

  if (!isOpen) {
    return null;
  }

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="lead-background" onClick={(e) => e.stopPropagation()}>
        <span className="lead-leaderboard-text">Î¶¨ÎçîÎ≥¥Îìú</span>
        <div className="lead-tab-container">
          <button className={`lead-tab-${activeTab === "Total" ? "on" : "off"}`} onClick={() => setActiveTab("Total")}>
            Ï†ÑÏ≤¥ Î¶¨ÎçîÎ≥¥Îìú
          </button>
          <button className={`lead-tab-${activeTab === "Department" ? "on" : "off"}`} onClick={() => setActiveTab("Department")}>
            ÌïôÍ≥º Î¶¨ÎçîÎ≥¥Îìú
          </button>
        </div>
        {activeTab === "Total" ? (
          <TotalLeaderboard data={data} />
        ) : (
          <>
            <input
              type="text"
              className="nickname-input"
              style={{ marginTop: 10, marginBottom: 0 }}
              placeholder={placeholder}
              value={inputValue}
              onChange={handleInputChange}
              onFocus={(e) => {
                setPlaceholder("");
                handleInputChange(e);
              }}
              onBlur={(e) => {
                setTimeout(() => setIsDropdownOpen(false), 100);
                setPlaceholder("Ïû¨Ìïô Ï§ëÏù∏ ÌïôÍ≥ºÎ•º Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî");
              }}
            />
            {isDropdownOpen && (
              <ul className="start-dropdown-list" style={{ top: `calc(50% - 87px)` }}>
                {filteredDepartments.map((dept, index) => (
                  <li key={index} className="start-dropdown-item" onClick={() => handleSelectedDepartment(dept)}>
                    {dept}
                  </li>
                ))}
              </ul>
            )}
            <DepartmentLeaderboard data={data} department={department} />
          </>
        )}
      </div>
    </div>
  );
};

export default Leaderboard;